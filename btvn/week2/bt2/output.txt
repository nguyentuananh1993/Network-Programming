#include <stdio.h> /* for printf() and fprintf();*/
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "diewitherror.c"
#define rcvbufsize 32
#define max 100
void diewitherror(char* errormessage);

int main(int argc, char* argv[]){
	file *input,*output;
	int sock;						//socket descriptor
	struct sockaddr_in echoservaddr;	// echo server address
	unsigned short echoservport;	// echo server port
	char*servip;	// server ip address
	char echostring[max];	// string to send to echo server
	char echobuffer[rcvbufsize];	// buffer for echo string
	unsigned int echostringlen;	// length of string to echo
	int bytesrcvd, totalbytesrcvd;	// bytes read in single recv() and total bytes read

	if((argc<4)|| (argc >5)){	// test for correct number of arguments
		fprintf(stderr,"usage: %s <server ip> <file input> <file output> [<echo port>]\n",argv[0]);
		exit(1);
	}

	servip = argv[1]; //first arg server ip address dotted quad
	//echostring = argv[2]; //second arg:string to echo
  	if ((input = fopen (argv[2],"r"))==null){
  		diewitherror("input file error. can't open to read.");
  	}
  	if ((output = fopen (argv[3],"w"))==null){
  		diewitherror("output file error. can't open to write.");
  	}
	if(argc == 5)
		echoservport = atoi(argv[4]); //use given port, if any
	else
		echoservport = 7; // 7 is the well-known port for the echo service

	//create a reliable, stream socket using tcp
	if((sock = socket(pf_inet, sock_stream, ipproto_tcp))<0)
		diewitherror("socket() failed");
	// construct the server address structure
	memset(&echoservaddr, 0, sizeof(echoservaddr));	// zero out structure
	echoservaddr.sin_family = af_inet;	// internet address family
	echoservaddr.sin_addr.s_addr = inet_addr(servip);//server ip address
	echoservaddr.sin_port = htons(echoservport); //server port

	//establish the connection to the echo server
	if(connect(sock,(struct sockaddr*) &echoservaddr,sizeof(echoservaddr))<0)
		diewitherror("connect() failed");
	while(!feof(input)){
		fscanf(input,"%s",echostring);
		echostringlen = strlen(echostring); //determine input length
		printf("sent size: %d bytes.\n",echostringlen);
		//send the string to the server
		if(send(sock, echostring, echostringlen, 0) != echostringlen)
			diewitherror("send() sent a different number of byte than expected");

		//receive the same string back from the server
		totalbytesrcvd = 0;
		printf("received: ");	// setup to print the echoed string
		while(totalbytesrcvd <echostringlen){
			/* receive up to the buffer size(minus 1 to leave space for a null terminator) bytes form the sender */
			if((bytesrcvd = recv(sock, echobuffer,rcvbufsize -1, 0))<=0)
				diewitherror("recv() failed or connection closed prematurely");
			totalbytesrcvd +=bytesrcvd;	// keep tally of total bytes
			echobuffer[bytesrcvd] ='\0'; //terminate the string!
			printf("%s - %d bytes \n",echobuffer,bytesrcvd);
		}
	}
	printf("\n");//print a final linefeed
	close(sock);
	exit(0);
}